<<<<<<< HEAD
'use strict';
=======
"use strict";
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getBrowserInformation;

<<<<<<< HEAD
var _bowser = require('bowser');
=======
var _bowser = require("bowser");
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c

var _bowser2 = _interopRequireDefault(_bowser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixByBrowser = {
<<<<<<< HEAD
  chrome: 'Webkit',
  safari: 'Webkit',
  ios: 'Webkit',
  android: 'Webkit',
  phantom: 'Webkit',
  opera: 'Webkit',
  webos: 'Webkit',
  blackberry: 'Webkit',
  bada: 'Webkit',
  tizen: 'Webkit',
  chromium: 'Webkit',
  vivaldi: 'Webkit',
  firefox: 'Moz',
  seamoney: 'Moz',
  sailfish: 'Moz',
  msie: 'ms',
  msedge: 'ms'
=======
  chrome: "Webkit",
  safari: "Webkit",
  ios: "Webkit",
  android: "Webkit",
  phantom: "Webkit",
  opera: "Webkit",
  webos: "Webkit",
  blackberry: "Webkit",
  bada: "Webkit",
  tizen: "Webkit",
  chromium: "Webkit",
  vivaldi: "Webkit",
  firefox: "Moz",
  seamoney: "Moz",
  sailfish: "Moz",
  msie: "ms",
  msedge: "ms"
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
};


var browserByCanIuseAlias = {
<<<<<<< HEAD
  chrome: 'chrome',
  chromium: 'chrome',
  safari: 'safari',
  firfox: 'firefox',
  msedge: 'edge',
  opera: 'opera',
  vivaldi: 'opera',
  msie: 'ie'
=======
  chrome: "chrome",
  chromium: "chrome",
  safari: "safari",
  firfox: "firefox",
  msedge: "edge",
  opera: "opera",
  vivaldi: "opera",
  msie: "ie"
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
};

function getBrowserName(browserInfo) {
  if (browserInfo.firefox) {
<<<<<<< HEAD
    return 'firefox';
=======
    return "firefox";
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
  }

  if (browserInfo.mobile || browserInfo.tablet) {
    if (browserInfo.ios) {
<<<<<<< HEAD
      return 'ios_saf';
    } else if (browserInfo.android) {
      return 'android';
    } else if (browserInfo.opera) {
      return 'op_mini';
=======
      return "ios_saf";
    } else if (browserInfo.android) {
      return "android";
    } else if (browserInfo.opera) {
      return "op_mini";
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
    }
  }

  for (var browser in browserByCanIuseAlias) {
    if (browserInfo.hasOwnProperty(browser)) {
      return browserByCanIuseAlias[browser];
    }
  }
}

/**
 * Uses bowser to get default browser browserInformation such as version and name
 * Evaluates bowser browserInfo and adds vendorPrefix browserInformation
 * @param {string} userAgent - userAgent that gets evaluated
 */
function getBrowserInformation(userAgent) {
  var browserInfo = _bowser2.default._detect(userAgent);

  if (browserInfo.yandexbrowser) {
<<<<<<< HEAD
    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\/[0-9.]*/, ''));
=======
    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\/[0-9.]*/, ""));
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
  }

  for (var browser in prefixByBrowser) {
    if (browserInfo.hasOwnProperty(browser)) {
      var prefix = prefixByBrowser[browser];

      browserInfo.jsPrefix = prefix;
<<<<<<< HEAD
      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';
=======
      browserInfo.cssPrefix = "-" + prefix.toLowerCase() + "-";
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
      break;
    }
  }

  browserInfo.browserName = getBrowserName(browserInfo);

  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
  if (browserInfo.version) {
    browserInfo.browserVersion = parseFloat(browserInfo.version);
  } else {
    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);
  }

  browserInfo.osVersion = parseFloat(browserInfo.osversion);

  // iOS forces all browsers to use Safari under the hood
  // as the Safari version seems to match the iOS version
  // we just explicitely use the osversion instead
  // https://github.com/rofrischmann/inline-style-prefixer/issues/72
<<<<<<< HEAD
  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {
=======
  if (browserInfo.browserName === "ios_saf" && browserInfo.browserVersion > browserInfo.osVersion) {
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
    browserInfo.browserVersion = browserInfo.osVersion;
  }

  // seperate native android chrome
  // https://github.com/rofrischmann/inline-style-prefixer/issues/45
<<<<<<< HEAD
  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {
    browserInfo.browserName = 'and_chr';
=======
  if (browserInfo.browserName === "android" && browserInfo.chrome && browserInfo.browserVersion > 37) {
    browserInfo.browserName = "and_chr";
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
  }

  // For android < 4.4 we want to check the osversion
  // not the chrome version, see issue #26
  // https://github.com/rofrischmann/inline-style-prefixer/issues/26
<<<<<<< HEAD
  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {
=======
  if (browserInfo.browserName === "android" && browserInfo.osVersion < 5) {
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
    browserInfo.browserVersion = browserInfo.osVersion;
  }

  // Samsung browser are basically build on Chrome > 44
  // https://github.com/rofrischmann/inline-style-prefixer/issues/102
<<<<<<< HEAD
  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {
    browserInfo.browserName = 'and_chr';
=======
  if (browserInfo.browserName === "android" && browserInfo.samsungBrowser) {
    browserInfo.browserName = "and_chr";
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
    browserInfo.browserVersion = 44;
  }

  return browserInfo;
}
<<<<<<< HEAD
module.exports = exports['default'];
=======
module.exports = exports["default"];
>>>>>>> a788998ecc8efe6343b9c2979e5b19f7302fa02c
